{"ast":null,"code":"var _jsxFileName = \"/Users/kashish/Documents/Instagram_Clone-React/src/Post.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Post.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { db } from './firebase';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport EditIcon from '@material-ui/icons/Edit';\n\nfunction Post({\n  postId,\n  user,\n  username,\n  caption,\n  imageUrl\n}) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState('');\n  const [likes, setLikes] = useState(0);\n  const [liked, setLiked] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [newCaption, setNewCaption] = useState(caption);\n  /*\n      useEffect(()=>{\n          let unsubscribe;\n    \n            if(postId) {\n                unsubscribe=db\n                .collection(\"posts\")\n                .doc(postId)\n                .collection(\"comments\")\n                .orderBy('timestamp','desc')\n                .onSnapshot((snapshot)=>{\n                    setComments(snapshot.docs.map((doc)=>doc.data()))\n                })\n            }\n            return ()=>{\n                unsubscribe();\n            };\n        },[postId]);\n  */\n\n  useEffect(() => {\n    let unsubscribeComments;\n    let unsubscribeLikes;\n\n    if (postId) {\n      // Fetch comments\n      unsubscribeComments = db.collection('posts').doc(postId).collection('comments').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n        setComments(snapshot.docs.map(doc => doc.data()));\n      }); // Fetch likes\n\n      unsubscribeLikes = db.collection('posts').doc(postId).collection('likes').onSnapshot(snapshot => {\n        setLikes(snapshot.size);\n      }); // Check if the current user has liked the post\n\n      if (user) {\n        db.collection('posts').doc(postId).collection('likes').doc(user.uid).get().then(doc => {\n          setLiked(doc.exists);\n        });\n      }\n    }\n\n    return () => {\n      unsubscribeComments && unsubscribeComments();\n      unsubscribeLikes && unsubscribeLikes();\n    };\n  }, [postId, user]);\n\n  const postComment = event => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName //timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n    });\n    setComment('');\n  };\n\n  const handleLike = () => {\n    // Toggle like status\n    const likeRef = db.collection('posts').doc(postId).collection('likes').doc(user.uid);\n\n    if (liked) {\n      likeRef.delete();\n    } else {\n      likeRef.set({\n        timestamp: new Date()\n      });\n    }\n\n    setLiked(!liked);\n  };\n\n  const handleDelete = () => {\n    db.collection(\"posts\").doc(postId).delete().then(function () {\n      console.log(\"Successfully deleted\");\n    }).catch(function (error) {\n      console.log(\"Error removing\", error);\n    });\n    /*\n    var desertRef=storage.child(name);\n    desertRef.delete().then(function(){\n        console.log(\"deleted successfully\");\n    }).catch(function(error){\n        //error\n    })\n    */\n  };\n\n  const handleToggleEditMode = () => {\n    setEditMode(!editMode);\n  };\n\n  const handleSaveCaption = () => {\n    db.collection('posts').doc(postId).update({\n      caption: newCaption\n    });\n    setEditMode(false);\n  };\n\n  return console.log(\"comments\", comments), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"post_avatar\",\n    alt: \"R\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, username), /*#__PURE__*/React.createElement(DeleteIcon, {\n    className: \"d\",\n    onClick: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"post_image\",\n    src: imageUrl,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"post_text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, editMode ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newCaption,\n    onChange: e => setNewCaption(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSaveCaption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, \"Save\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, username), \" \", caption, user && user.uid === postId && /*#__PURE__*/React.createElement(EditIcon, {\n    className: \"edit\",\n    onClick: handleToggleEditMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLike,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n    color: liked ? 'secondary' : 'default',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, likes, \" likes\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, comments.map(comment => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, comment.username), \"  \", comment.text))), user && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"post_commentBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"post_input\",\n    type: \"text\",\n    placeholder: \"Add a comment..\",\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"post_button\",\n    disabled: !comment,\n    type: \"submit\",\n    onClick: postComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, \"Post\")));\n}\n\nexport default Post;","map":{"version":3,"sources":["/Users/kashish/Documents/Instagram_Clone-React/src/Post.js"],"names":["React","useState","useEffect","Avatar","db","DeleteIcon","FavoriteIcon","EditIcon","Post","postId","user","username","caption","imageUrl","comments","setComments","comment","setComment","likes","setLikes","liked","setLiked","editMode","setEditMode","newCaption","setNewCaption","unsubscribeComments","unsubscribeLikes","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","size","uid","get","then","exists","postComment","event","preventDefault","add","text","displayName","handleLike","likeRef","delete","set","timestamp","Date","handleDelete","console","log","catch","error","handleToggleEditMode","handleSaveCaption","update","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Post.css'\nimport Avatar from '@material-ui/core/Avatar'\nimport { db } from './firebase';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport EditIcon from '@material-ui/icons/Edit';\n\nfunction Post({ postId, user, username, caption, imageUrl }) {\n\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('')\n    const [likes, setLikes] = useState(0);\n    const [liked, setLiked] = useState(false);\n    const [editMode, setEditMode] = useState(false);\n    const [newCaption, setNewCaption] = useState(caption);\n\n\n    /*\n        useEffect(()=>{\n            let unsubscribe;\n      \n              if(postId) {\n                  unsubscribe=db\n                  .collection(\"posts\")\n                  .doc(postId)\n                  .collection(\"comments\")\n                  .orderBy('timestamp','desc')\n                  .onSnapshot((snapshot)=>{\n                      setComments(snapshot.docs.map((doc)=>doc.data()))\n                  })\n              }\n              return ()=>{\n                  unsubscribe();\n              };\n          },[postId]);\n    */\n\n    useEffect(() => {\n        let unsubscribeComments;\n        let unsubscribeLikes;\n\n        if (postId) {\n            // Fetch comments\n            unsubscribeComments = db\n                .collection('posts')\n                .doc(postId)\n                .collection('comments')\n                .orderBy('timestamp', 'desc')\n                .onSnapshot((snapshot) => {\n                    setComments(snapshot.docs.map((doc) => doc.data()));\n                });\n\n            // Fetch likes\n            unsubscribeLikes = db\n                .collection('posts')\n                .doc(postId)\n                .collection('likes')\n                .onSnapshot((snapshot) => {\n                    setLikes(snapshot.size);\n                });\n\n            // Check if the current user has liked the post\n            if (user) {\n                db.collection('posts')\n                    .doc(postId)\n                    .collection('likes')\n                    .doc(user.uid)\n                    .get()\n                    .then((doc) => {\n                        setLiked(doc.exists);\n                    });\n            }\n        }\n\n        return () => {\n            unsubscribeComments && unsubscribeComments();\n            unsubscribeLikes && unsubscribeLikes();\n        };\n    }, [postId, user]);\n\n    const postComment = (event) => {\n        event.preventDefault();\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            text: comment,\n            username: user.displayName,\n            //timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setComment('');\n    }\n    const handleLike = () => {\n        // Toggle like status\n        const likeRef = db.collection('posts').doc(postId).collection('likes').doc(user.uid);\n\n        if (liked) {\n            likeRef.delete();\n        } else {\n            likeRef.set({\n                timestamp: new Date(),\n            });\n        }\n\n        setLiked(!liked);\n    };\n    const handleDelete = () => {\n\n        db.collection(\"posts\").doc(postId).delete().then(function () {\n            console.log(\"Successfully deleted\");\n        }).catch(function (error) {\n            console.log(\"Error removing\", error);\n        });\n        /*\n        var desertRef=storage.child(name);\n        desertRef.delete().then(function(){\n            console.log(\"deleted successfully\");\n        }).catch(function(error){\n            //error\n        })\n        */\n\n    }\n\n    const handleToggleEditMode = () => {\n        setEditMode(!editMode);\n    };\n\n    const handleSaveCaption = () => {\n        db.collection('posts').doc(postId).update({\n            caption: newCaption,\n        });\n\n        setEditMode(false);\n    };\n\n\n    return (\n        console.log(\"comments\",comments),\n        <div className=\"post\">\n            <div className=\"post_header\">\n\n                <Avatar\n                    className=\"post_avatar\"\n                    alt='R'\n\n                >\n                </Avatar>\n                <h3>{username}</h3>\n                <DeleteIcon className=\"d\" onClick={handleDelete} />\n            </div>\n            <img className=\"post_image\" src={imageUrl} alt=\"\"></img>\n            <h4 className=\"post_text\">\n                {editMode ? (\n                    <>\n                        <input\n                            type=\"text\"\n                            value={newCaption}\n                            onChange={(e) => setNewCaption(e.target.value)}\n                        />\n                        <button onClick={handleSaveCaption}>Save</button>\n                    </>\n                ) : (\n                    <>\n                        <strong>{username}</strong> {caption}\n                        {user && user.uid === postId && (\n                            <EditIcon className=\"edit\" onClick={handleToggleEditMode} />\n                        )}\n                    </>\n                )}\n            </h4>\n            <div className=\"post_actions\">\n                <button onClick={handleLike}>\n                    <FavoriteIcon color={liked ? 'secondary' : 'default'} />\n                </button>\n                <span>{likes} likes</span>\n            </div>\n            <div className=\"post_comments\">\n                {comments.map((comment) => (\n                    <p >\n                        <strong>{comment.username}</strong>  {comment.text}\n                    </p>\n                ))}\n            </div>\n            {user && (\n                <form className=\"post_commentBox\">\n                    <input\n                        className=\"post_input\"\n                        type=\"text\"\n                        placeholder=\"Add a comment..\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                    />\n                    <button\n                        className=\"post_button\"\n                        disabled={!comment}\n                        type=\"submit\"\n                        onClick={postComment}\n\n\n\n                    >\n                        Post\n                    </button>\n\n\n\n\n                </form>\n            )}\n        </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}