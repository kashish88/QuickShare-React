{"ast":null,"code":"var _jsxFileName = \"/Users/kashish/Documents/Instagram_Clone-React/src/Post.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Post.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { db } from './firebase';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nfunction Post({\n  postId,\n  user,\n  username,\n  caption,\n  imageUrl,\n  userId\n}) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState('');\n  const [likes, setLikes] = useState(0);\n  const [liked, setLiked] = useState(false);\n  /*\n      useEffect(()=>{\n          let unsubscribe;\n    \n            if(postId) {\n                unsubscribe=db\n                .collection(\"posts\")\n                .doc(postId)\n                .collection(\"comments\")\n                .orderBy('timestamp','desc')\n                .onSnapshot((snapshot)=>{\n                    setComments(snapshot.docs.map((doc)=>doc.data()))\n                })\n            }\n            return ()=>{\n                unsubscribe();\n            };\n        },[postId]);\n  */\n\n  useEffect(() => {\n    let unsubscribeComments;\n    let unsubscribeLikes;\n\n    if (postId) {\n      // Fetch comments\n      unsubscribeComments = db.collection('posts').doc(postId).collection('comments').onSnapshot(snapshot => {\n        setComments(snapshot.docs.map(doc => ({ ...doc.data(),\n          commentId: doc.id\n        })));\n      }); // Fetch likes\n\n      unsubscribeLikes = db.collection('posts').doc(postId).collection('likes').onSnapshot(snapshot => {\n        setLikes(snapshot.size);\n      }); // Check if the current user has liked the post\n\n      if (user) {\n        db.collection('posts').doc(postId).collection('likes').doc(user.uid).get().then(doc => {\n          setLiked(doc.exists);\n        });\n      }\n    }\n\n    return () => {\n      unsubscribeComments && unsubscribeComments();\n      unsubscribeLikes && unsubscribeLikes();\n    };\n  }, [postId, user]);\n\n  const postComment = event => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName //timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n    });\n    setComment('');\n  };\n\n  const handleLike = () => {\n    // Toggle like status\n    const likeRef = db.collection('posts').doc(postId).collection('likes').doc(user.uid);\n\n    if (liked) {\n      likeRef.delete();\n    } else {\n      likeRef.set({\n        timestamp: new Date()\n      });\n    }\n\n    setLiked(!liked);\n  };\n\n  const deleteComment = commentId => {\n    db.collection('posts').doc(postId).collection('comments').doc(commentId).delete().then(() => {\n      console.log('Comment deleted successfully');\n    }).catch(error => {\n      console.error('Error deleting comment:', error);\n    });\n  };\n\n  const handleDelete = () => {\n    db.collection(\"posts\").doc(postId).delete().then(function () {\n      console.log(\"Successfully deleted\");\n    }).catch(function (error) {\n      console.log(\"Error removing\", error);\n    });\n    /*\n    var desertRef=storage.child(name);\n    desertRef.delete().then(function(){\n        console.log(\"deleted successfully\");\n    }).catch(function(error){\n        //error\n    })\n    */\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"post_avatar\",\n    alt: \"R\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, username), /*#__PURE__*/React.createElement(DeleteIcon, {\n    className: \"d\",\n    onClick: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"post_image\",\n    src: imageUrl,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"post_text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 39\n    }\n  }, username), \"  \", caption), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLike,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n    color: liked ? 'secondary' : 'default',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, likes, \" likes\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post_comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n    key: comment.commentId,\n    className: \"comment_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 29\n    }\n  }, comment.username), \" \", comment.text), user && user.uid === userId && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteComment(comment.commentId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 29\n    }\n  }, \"Delete\")))), user && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"post_commentBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"post_input\",\n    type: \"text\",\n    placeholder: \"Add a comment..\",\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"post_button\",\n    disabled: !comment,\n    type: \"submit\",\n    onClick: postComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, \"Post\")));\n}\n\nexport default Post;","map":{"version":3,"sources":["/Users/kashish/Documents/Instagram_Clone-React/src/Post.js"],"names":["React","useState","useEffect","Avatar","db","DeleteIcon","FavoriteIcon","Post","postId","user","username","caption","imageUrl","userId","comments","setComments","comment","setComment","likes","setLikes","liked","setLiked","unsubscribeComments","unsubscribeLikes","collection","doc","onSnapshot","snapshot","docs","map","data","commentId","id","size","uid","get","then","exists","postComment","event","preventDefault","add","text","displayName","handleLike","likeRef","delete","set","timestamp","Date","deleteComment","console","log","catch","error","handleDelete","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Post.css'\nimport Avatar from '@material-ui/core/Avatar'\nimport { db } from './firebase';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nfunction Post({ postId, user, username, caption, imageUrl, userId }) {\n\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('')\n    const [likes, setLikes] = useState(0);\n    const [liked, setLiked] = useState(false);\n\n\n\n    /*\n        useEffect(()=>{\n            let unsubscribe;\n      \n              if(postId) {\n                  unsubscribe=db\n                  .collection(\"posts\")\n                  .doc(postId)\n                  .collection(\"comments\")\n                  .orderBy('timestamp','desc')\n                  .onSnapshot((snapshot)=>{\n                      setComments(snapshot.docs.map((doc)=>doc.data()))\n                  })\n              }\n              return ()=>{\n                  unsubscribe();\n              };\n          },[postId]);\n    */\n\n    useEffect(() => {\n        let unsubscribeComments;\n        let unsubscribeLikes;\n\n        if (postId) {\n            // Fetch comments\n            unsubscribeComments = db\n                .collection('posts')\n                .doc(postId)\n                .collection('comments')\n                .onSnapshot((snapshot) => {\n                    setComments(snapshot.docs.map((doc) => ({ ...doc.data(), commentId: doc.id })));\n                });\n\n            // Fetch likes\n            unsubscribeLikes = db\n                .collection('posts')\n                .doc(postId)\n                .collection('likes')\n                .onSnapshot((snapshot) => {\n                    setLikes(snapshot.size);\n                });\n\n            // Check if the current user has liked the post\n            if (user) {\n                db.collection('posts')\n                    .doc(postId)\n                    .collection('likes')\n                    .doc(user.uid)\n                    .get()\n                    .then((doc) => {\n                        setLiked(doc.exists);\n                    });\n            }\n        }\n\n        return () => {\n            unsubscribeComments && unsubscribeComments();\n            unsubscribeLikes && unsubscribeLikes();\n        };\n    }, [postId, user]);\n\n    const postComment = (event) => {\n        event.preventDefault();\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            text: comment,\n            username: user.displayName,\n            //timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setComment('');\n    }\n    const handleLike = () => {\n        // Toggle like status\n        const likeRef = db.collection('posts').doc(postId).collection('likes').doc(user.uid);\n\n        if (liked) {\n            likeRef.delete();\n        } else {\n            likeRef.set({\n                timestamp: new Date(),\n            });\n        }\n\n        setLiked(!liked);\n    };\n    const deleteComment = (commentId) => {\n        db.collection('posts')\n            .doc(postId)\n            .collection('comments')\n            .doc(commentId)\n            .delete()\n            .then(() => {\n                console.log('Comment deleted successfully');\n            })\n            .catch((error) => {\n                console.error('Error deleting comment:', error);\n            });\n    };\n\n    const handleDelete = () => {\n\n        db.collection(\"posts\").doc(postId).delete().then(function () {\n            console.log(\"Successfully deleted\");\n        }).catch(function (error) {\n            console.log(\"Error removing\", error);\n        });\n        /*\n        var desertRef=storage.child(name);\n        desertRef.delete().then(function(){\n            console.log(\"deleted successfully\");\n        }).catch(function(error){\n            //error\n        })\n        */\n\n    }\n\n\n\n    return (\n        <div className=\"post\">\n            <div className=\"post_header\">\n\n                <Avatar\n                    className=\"post_avatar\"\n                    alt='R'\n\n                >\n                </Avatar>\n                <h3>{username}</h3>\n                <DeleteIcon className=\"d\" onClick={handleDelete} />\n            </div>\n            <img className=\"post_image\" src={imageUrl} alt=\"\"></img>\n            <h4 className=\"post_text\"><strong>{username}</strong>  {caption}</h4>\n            <div className=\"post_actions\">\n                <button onClick={handleLike}>\n                    <FavoriteIcon color={liked ? 'secondary' : 'default'} />\n                </button>\n                <span>{likes} likes</span>\n            </div>\n            <div className=\"post_comments\">\n                {comments.map((comment) => (\n                    <div key={comment.commentId} className=\"comment_container\">\n                        <p>\n                            <strong>{comment.username}</strong> {comment.text}\n                        </p>\n                        {user && user.uid === userId && (\n                            <button onClick={() => deleteComment(comment.commentId)}>\n                                Delete\n                            </button>\n                        )}\n                    </div>\n                ))}\n            </div>\n            {user && (\n                <form className=\"post_commentBox\">\n                    <input\n                        className=\"post_input\"\n                        type=\"text\"\n                        placeholder=\"Add a comment..\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                    />\n                    <button\n                        className=\"post_button\"\n                        disabled={!comment}\n                        type=\"submit\"\n                        onClick={postComment}\n\n\n\n                    >\n                        Post\n                    </button>\n\n\n\n\n                </form>\n            )}\n        </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}